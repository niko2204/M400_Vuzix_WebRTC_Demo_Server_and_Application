<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="shortcut icon" href="images/favicon.png" type="image/png">

    <title>Vuzix P2P Demonstration</title>

    <link href="css/style.default.css" rel="stylesheet">
    <link href="css/jquery.gritter.css" rel="stylesheet">
    <style>
        textarea {
            font-family: monospace;
            margin: 2px;
            height: 100px;
            width: 250px;
        }

        div#send {
            float: left;
            margin-right: 20px;
        }

        div#sendreceive {
            margin: 0 0 20px 0;
        }

        h2 {
            margin: 0 0 10px 0;
        }

        video {
            border: 1px solid #ccc;
        }

        div#local {
            text-align: center;
            margin-left: 10%;
            float: left;
            min-width: 325px;
        }

        div#remote {
            text-align: center;
            float: left;
            margin-left: 10%;
            min-width: 325px;
        }

        div#screen {
            text-align: center;
            float: left;
            margin-left: 10%;
            min-width: 325px;
        }

        #container {
            width: 100%;
            text-align: center;
        }
    </style>
    <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
        <script src="js/html5shiv.js"></script>
        <script src="js/respond.min.js"></script>
        <![endif]-->
</head>

<body>
    <!-- Preloader -->
    <div id="preloader">
        <div id="status">
            <i class="fa fa-spinner fa-spin"></i>
        </div>
    </div>

    <section>

        <div class="leftpanel">

            <div class="logopanel">
                <img src="/images/vuzix_logo.png" alt="Vuzix" style="margin-top:4px;margin-bottom:4px;" />
            </div>

            <div class="leftpanelinner">

                <div class="infosummary">
                    <h5 class="sidebartitle">Client QR Configure</h5>
                    <ul>
                        <li style="background: white;">
                            <div id="mConnectQRCode" style="width:50%; margin:auto;">

                            </div>
                        </li>
                        <li>
                            <p>
                                <input id="devid" type="text" style="width:60%;" />
                                <button id="devname">Change</button>
                            </p>

                        </li>
                    </ul>
                </div>

            </div>
            <!-- leftpanelinner -->
        </div>
        <!-- leftpanel -->

        <div class="mainpanel">

            <div class="headerbar">

                <a class="menutoggle">
                    <i class="fa fa-bars"></i>
                </a>
                <div class="header-label">
                    <h2>Vuzix WebRTC Demonstration</h3>
                </div>

            </div>
            <!-- headerbar -->

            <div class="alert alert-warning">
                <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                <strong>Warning!</strong> This sample only works with the latest Chrome, FireFox and Safari.
            </div>

            <div class="contentpanel">
                <div class="panel panel-default">

                    <div class="panel-heading">
                        <div class="panel-btns">
                            <a href="" class="panel-close">&times;</a>
                            <a href="" class="minimize">&minus;</a>
                        </div>
                        <h4 class="panel-title">Connection</h4>
                    </div>
                    <div class="panel-body">
                        <div id="control" class="form-horizontal form-bordered">
                            <p>
                                <input id="uid" type="text" />
                                <button id="login">Login</button>
                                <button id="logoff">Logoff</button>
                            </p>
                            <p>
                                <input id="remote-uid" type="text" />
                                <button id="target-connect">Invite</button>
                                <button id="target-video-publish" disabled="true">Start Video Sharing</button>
                                <button id="target-video-unpublish" disabled="true">Stop Video Sharing</button>
                            </p>
                        </div>
                    </div>
                </div>

                <div class="panel panel-default">
                    <div class="panel-heading">
                        <div class="panel-btns">
                            <a href="" class="panel-close">&times;</a>
                            <a href="" class="minimize">&minus;</a>
                        </div>
                        <h4 class="panel-title">Video Streams</h4>
                    </div>
                    <div class="panel-body">
                        <div id="container">
                            <div id="local">
                                <h2>Local</h2>
                                <video width="320px" height="240px" id="localVideo" playsinline muted autoplay></video>
                            </div>
                            <div id="remote">
                                <h2>Remote</h2>
                                <video width="320px" height="240px" id="remoteVideo" playsinline autoplay></video>
                            </div>
                            <!--
                            <div id="screen">
                                <h2>Screen</h2>
                                <video width="320px" height="240px" id="screenVideo" playsinline autoplay></video>
                            </div>
                            -->
                        </div>
                    </div>
                </div><!-- panel -->

                <div class="panel panel-default">
                    <div class="panel-heading">
                        <div class="panel-btns">
                            <a href="" class="panel-close">&times;</a>
                            <a href="" class="minimize">&minus;</a>
                        </div>
                        <h4 class="panel-title">Data Streams</h4>
                    </div>
                    <div class="panel-body">
                        <div id="sendreceive">
                            <div id="send">
                                <h2>Send data</h2>
                                <textarea id="dataSent" rows="5" cols="10"></textarea>
                            </div>
                            <div id="receive">
                                <h2>Received data</h2>
                                <textarea id="dataReceived" rows="5" cols="10" disabled="true"></textarea>
                            </div>
                            <button id="data-send">Send data</button>
                        </div>
                    </div>
                </div>

                <footer id="status"></footer>
                <div id="infoDiv"></div>

            </div>

        </div>
        <!-- mainpanel -->

    </section>



    <script src="js/jquery-1.11.1.min.js"></script>
    <script src="js/jquery-migrate-1.2.1.min.js"></script>
    <script src="js/bootstrap.min.js"></script>
    <script src="js/modernizr.min.js"></script>
    <script src="js/jquery.sparkline.min.js"></script>
    <script src="js/toggles.min.js"></script>
    <script src="js/retina.min.js"></script>
    <script src="js/jquery.cookies.js"></script>
    <script src="js/jquery-qrcode.min.js"></script>
    <script src="js/jquery.gritter.min.js"></script>
    <script src="js/utils.js" type="text/javascript"></script>
    <script src="js/socket.io.js" type="text/javascript"></script>
    <script src="js/adapter-7.0.0.js" type="text/javascript"></script>
    <script src="js/sc.websocket.js" type="text/javascript"></script>
    <script src="js/owt.js" type="text/javascript"></script>

    <script type="text/javascript">
        var isVideo = 1;
        var serverAddress = 'http://127.0.0.1:8095'; // configured for local host signaling server's address.
        /* need to configure stun and turn server here not used in the demo application */
        const signaling = new SignalingChannel();
        let publicationForCamera;

        var getUrlParameter = function getUrlParameter(sParam) {
            var sPageURL = decodeURIComponent(window.location.search.substring(1)),
                sURLVariables = sPageURL.split('&'),
                sParameterName,
                i;

            for (i = 0; i < sURLVariables.length; i++) {
                sParameterName = sURLVariables[i].split('=');

                if (sParameterName[0] === sParam) {
                    return sParameterName[1] === undefined ? true : sParameterName[1];
                }
            }
        };

        var p2p = new Owt.P2P.P2PClient({
            audioEncodings: true,
            videoEncodings: [{ codec: { name: 'vp8' } }],
            rtcConfiguration: {
                iceServers: [{
                    urls: "stun:example.com:3478"
                }, {
                    urls: ["turn:example.com:3478?transport=udp",
                        "turn:example.com:3478?transport=tcp"
                    ],
                    credential: "password",
                    username: "username"
                }]
            },
        }, signaling);

        var localStream;
        var localScreen;
        // var screenStream;

        var getTargetId = function () {
            return $('#remote-uid').val();
        };
    </script>

    <script src="js/custom.js"></script>

    <script type="text/javascript">
    
        p2p.addEventListener('chat-invited', function (e) { // Received data from datachannel.
            $('#remote-uid').val(e.senderId);
            // p2p.accept(getTargetId());            
        });

        p2p.addEventListener('chat-accepted', function (e) { 
            console.log('chat accepted');
        });

        p2p.addEventListener('chat-denied', function (e) {
            console.log('Invitation to ' + e.senderId + ' has been denied.');
        });

        p2p.addEventListener('chat-started', function (e) { // Chat started
            console.log('chat started.');
            $('#data-send').prop('disabled', false);
            $('#target-video-publish').prop('disabled', false);
        });

        p2p.addEventListener('chat-stopped', function (e) { // Chat stopped.
            console.log('chat stopped.');
            $('#data-send').prop('disabled', true);
            $('#target-video-publish').prop('disabled', true);
            $('#target-video-unpublish').prop('disabled', true);
            $('#remote video').hide();
            if (localStream) {
                localStream.close();
                localStream = undefined;
            }
            if (localScreen) {
                localScreen.close();
                localScreen = undefined;
            }
            console.log('Chat stopped. Sender ID: ' + e.senderId + ', peer ID: ' +
                e.peerId);
        });

        p2p.addEventListener('streamadded', function (e) { // A remote stream is available.
            e.stream.addEventListener('ended', () => {
                console.log('Stream is removed.');
            });
            if (e.stream.source.video === 'screen-cast') {
                $('#screen video').show();
                $('#screen video').get(0).srcObject = e.stream.mediaStream;
                $('#screen video').get(0).play();
            } else if (e.stream.source.audio || e.stream.source.video) {
                $('#remote video').show();
                $('#remote video').get(0).srcObject = e.stream.mediaStream;
                $('#remote video').get(0).play();
            }
            isVideo++;
        });

        p2p.addEventListener('stream-removed', function (e) { // A remote stream is available.
            var stream = e.stream;
            if (stream && stream.isScreen()) {
                $("#screen video").hide();
            } else {
                $("#remote video").hide();
            }
            console.log('Stream removed. Stream ID: ' + e.stream.mediaStream.id);
        });

        p2p.addEventListener('messagereceived', function (e) { // Received data from datachannel.
            $('#dataReceived').val(e.origin + ': ' + e.message);
        });

        window.onbeforeunload = function () {
            p2p.stop($('#remote-uid').val());
        }
    </script>
</body>

</html>